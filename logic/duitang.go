package logic

import (
	"encoding/json"
	"fmt"
	"time"
)

const (
	DuitangLimit   = 24
	DuitangPath    = "./duitangimg"
	DuitangBaseUrl = "https://www.duitang.com/napi/blog/list/by_filter_id/?include_fields=top_comments,is_root,source_link,item,buyable,root_id,status,like_count,sender,album,reply_count&filter_id=壁纸-%s&start=%d&_=%d&limit=%d"
)

type AutoGenerated struct {
	Status int  `json:"status"`
	Data   Data `json:"data"`
}
type Album struct {
	ID            int           `json:"id"`
	Name          string        `json:"name"`
	Count         int           `json:"count"`
	Category      int           `json:"category"`
	Covers        []string      `json:"covers"`
	Tags          []interface{} `json:"tags"`
	Status        int           `json:"status"`
	LikeCount     int           `json:"like_count"`
	ActivedAt     int           `json:"actived_at"`
	FavoriteCount int           `json:"favorite_count"`
	FavoriteID    int           `json:"favorite_id"`
	VisitCount    int           `json:"visit_count"`
}
type Photo struct {
	Width        int    `json:"width"`
	Height       int    `json:"height"`
	Path         string `json:"path"`
	Size         int    `json:"size"`
	FileTypeCode int    `json:"file_type_code"`
}
type Sender struct {
	ID            int      `json:"id"`
	Username      string   `json:"username"`
	Avatar        string   `json:"avatar"`
	Identity      []string `json:"identity"`
	IsCertifyUser bool     `json:"is_certify_user"`
}
type TopComments struct {
	More       int           `json:"more"`
	ObjectList []interface{} `json:"object_list"`
	NextStart  int           `json:"next_start"`
}
type ObjectList struct {
	Album             Album         `json:"album"`
	Photo             Photo         `json:"photo"`
	Msg               string        `json:"msg"`
	ID                int           `json:"id"`
	Sender            Sender        `json:"sender"`
	Buyable           int           `json:"buyable"`
	Tags              []interface{} `json:"tags"`
	Status            int           `json:"status"`
	OriAddDatetime    int64         `json:"oriAddDatetime"`
	IsRoot            int           `json:"is_root"`
	ReplyCount        int           `json:"reply_count"`
	SourceLink        string        `json:"source_link"`
	AddDatetime       string        `json:"add_datetime"`
	AddDatetimePretty string        `json:"add_datetime_pretty"`
	AddDatetimeTs     int           `json:"add_datetime_ts"`
	SenderID          int           `json:"sender_id"`
	LikeCount         int           `json:"like_count"`
	FavoriteCount     int           `json:"favorite_count"`
	ExtraType         string        `json:"extra_type"`
	TopComments       TopComments   `json:"top_comments"`
	RootBlogID        int           `json:"root_blog_id"`
	IsCertifyUser     bool          `json:"is_certify_user"`
	ShortVideo        bool          `json:"short_video"`
}
type Data struct {
	Total      int          `json:"total"`
	NextStart  int          `json:"next_start"`
	ObjectList []ObjectList `json:"object_list"`
	More       int          `json:"more"`
	Limit      int          `json:"limit"`
}

var DuitangImgType = map[int]string{
	1:  "颜色",
	2:  "渐变",
	3:  "可爱",
	4:  "情侣",
	5:  "少女心",
	6:  "小清新",
	7:  "动漫",
	8:  "文字",
	9:  "锁屏",
	10: "朋友圈",
	11: "爱豆",
	12: "影视剧",
	13: "三屏壁纸",
	14: "考试",
	15: "电脑",
	16: "减肥",
}

func CrawDuitang(begin, end int) {
	var imgtag int

	fmt.Println("请选择要爬取的图片标签:")
	s := ""
	tmpArr := make([]string, len(DuitangImgType))
	for k, v := range DuitangImgType {
		tmpArr[k-1] = v
	}
	for k, v := range tmpArr {
		s += fmt.Sprintf("%d:%s \n", k+1, v)
	}
	fmt.Println(s)

	_, err := fmt.Scanln(&imgtag)
	if err != nil {
		fmt.Println("请输入合法的标签序号")
		return
	}
	_, ok := DuitangImgType[imgtag]
	if !ok {
		fmt.Println("请输入合法的标签序号")
		return
	}

	err = NewPathIfNotExists(DuitangPath)
	if err != nil {
		fmt.Printf("mkdir err %s", err.Error())
		return
	}
	for i := begin; i <= end; i++ {
		Wg.Add(1)
		start := (i - 1) * DuitangLimit
		url := fmt.Sprintf(DuitangBaseUrl, DuitangImgType[imgtag], start, time.Now().Unix(), DuitangLimit)
		CrawDuitangHandler(url)
	}

	Wg.Wait()
}
func CrawDuitangHandler(url string) {
	defer Wg.Done()
	data, err := GetUrlData(url)
	if err != nil {
		fmt.Printf("get data by url:%s err:%s", url, err.Error())
		return
	}

	dataStruct := new(AutoGenerated)
	err = json.Unmarshal(data, dataStruct)
	if err != nil {
		fmt.Printf("url:%s data illegality", url)
		return
	}
	for _, item := range dataStruct.Data.ObjectList {
		DownImg(item.Photo.Path, DuitangPath)
	}
}
